// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vector_it.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vector_5fit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vector_5fit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vector_5fit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vector_5fit_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vector_5fit_2eproto;
namespace vector {
class full_iter_vec;
class full_iter_vecDefaultTypeInternal;
extern full_iter_vecDefaultTypeInternal _full_iter_vec_default_instance_;
class vector;
class vectorDefaultTypeInternal;
extern vectorDefaultTypeInternal _vector_default_instance_;
}  // namespace vector
PROTOBUF_NAMESPACE_OPEN
template<> ::vector::full_iter_vec* Arena::CreateMaybeMessage<::vector::full_iter_vec>(Arena*);
template<> ::vector::vector* Arena::CreateMaybeMessage<::vector::vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vector {

// ===================================================================

class vector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vector.vector) */ {
 public:
  inline vector() : vector(nullptr) {}
  virtual ~vector();

  vector(const vector& from);
  vector(vector&& from) noexcept
    : vector() {
    *this = ::std::move(from);
  }

  inline vector& operator=(const vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline vector& operator=(vector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const vector& default_instance();

  static inline const vector* internal_default_instance() {
    return reinterpret_cast<const vector*>(
               &_vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(vector& a, vector& b) {
    a.Swap(&b);
  }
  inline void Swap(vector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline vector* New() const final {
    return CreateMaybeMessage<vector>(nullptr);
  }

  vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<vector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const vector& from);
  void MergeFrom(const vector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(vector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vector.vector";
  }
  protected:
  explicit vector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vector_5fit_2eproto);
    return ::descriptor_table_vector_5fit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecValueFieldNumber = 2,
    kIterFieldNumber = 1,
  };
  // repeated float vec_value = 2;
  int vec_value_size() const;
  private:
  int _internal_vec_value_size() const;
  public:
  void clear_vec_value();
  private:
  float _internal_vec_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vec_value() const;
  void _internal_add_vec_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vec_value();
  public:
  float vec_value(int index) const;
  void set_vec_value(int index, float value);
  void add_vec_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vec_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vec_value();

  // required int32 iter = 1;
  bool has_iter() const;
  private:
  bool _internal_has_iter() const;
  public:
  void clear_iter();
  ::PROTOBUF_NAMESPACE_ID::int32 iter() const;
  void set_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iter() const;
  void _internal_set_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vector.vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vec_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 iter_;
  friend struct ::TableStruct_vector_5fit_2eproto;
};
// -------------------------------------------------------------------

class full_iter_vec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vector.full_iter_vec) */ {
 public:
  inline full_iter_vec() : full_iter_vec(nullptr) {}
  virtual ~full_iter_vec();

  full_iter_vec(const full_iter_vec& from);
  full_iter_vec(full_iter_vec&& from) noexcept
    : full_iter_vec() {
    *this = ::std::move(from);
  }

  inline full_iter_vec& operator=(const full_iter_vec& from) {
    CopyFrom(from);
    return *this;
  }
  inline full_iter_vec& operator=(full_iter_vec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const full_iter_vec& default_instance();

  static inline const full_iter_vec* internal_default_instance() {
    return reinterpret_cast<const full_iter_vec*>(
               &_full_iter_vec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(full_iter_vec& a, full_iter_vec& b) {
    a.Swap(&b);
  }
  inline void Swap(full_iter_vec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(full_iter_vec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline full_iter_vec* New() const final {
    return CreateMaybeMessage<full_iter_vec>(nullptr);
  }

  full_iter_vec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<full_iter_vec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const full_iter_vec& from);
  void MergeFrom(const full_iter_vec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(full_iter_vec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vector.full_iter_vec";
  }
  protected:
  explicit full_iter_vec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vector_5fit_2eproto);
    return ::descriptor_table_vector_5fit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecTFieldNumber = 2,
  };
  // repeated .vector.vector vec_t = 2;
  int vec_t_size() const;
  private:
  int _internal_vec_t_size() const;
  public:
  void clear_vec_t();
  ::vector::vector* mutable_vec_t(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vector::vector >*
      mutable_vec_t();
  private:
  const ::vector::vector& _internal_vec_t(int index) const;
  ::vector::vector* _internal_add_vec_t();
  public:
  const ::vector::vector& vec_t(int index) const;
  ::vector::vector* add_vec_t();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vector::vector >&
      vec_t() const;

  // @@protoc_insertion_point(class_scope:vector.full_iter_vec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vector::vector > vec_t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vector_5fit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// vector

// required int32 iter = 1;
inline bool vector::_internal_has_iter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool vector::has_iter() const {
  return _internal_has_iter();
}
inline void vector::clear_iter() {
  iter_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 vector::_internal_iter() const {
  return iter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 vector::iter() const {
  // @@protoc_insertion_point(field_get:vector.vector.iter)
  return _internal_iter();
}
inline void vector::_internal_set_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  iter_ = value;
}
inline void vector::set_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iter(value);
  // @@protoc_insertion_point(field_set:vector.vector.iter)
}

// repeated float vec_value = 2;
inline int vector::_internal_vec_value_size() const {
  return vec_value_.size();
}
inline int vector::vec_value_size() const {
  return _internal_vec_value_size();
}
inline void vector::clear_vec_value() {
  vec_value_.Clear();
}
inline float vector::_internal_vec_value(int index) const {
  return vec_value_.Get(index);
}
inline float vector::vec_value(int index) const {
  // @@protoc_insertion_point(field_get:vector.vector.vec_value)
  return _internal_vec_value(index);
}
inline void vector::set_vec_value(int index, float value) {
  vec_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:vector.vector.vec_value)
}
inline void vector::_internal_add_vec_value(float value) {
  vec_value_.Add(value);
}
inline void vector::add_vec_value(float value) {
  _internal_add_vec_value(value);
  // @@protoc_insertion_point(field_add:vector.vector.vec_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
vector::_internal_vec_value() const {
  return vec_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
vector::vec_value() const {
  // @@protoc_insertion_point(field_list:vector.vector.vec_value)
  return _internal_vec_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
vector::_internal_mutable_vec_value() {
  return &vec_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
vector::mutable_vec_value() {
  // @@protoc_insertion_point(field_mutable_list:vector.vector.vec_value)
  return _internal_mutable_vec_value();
}

// -------------------------------------------------------------------

// full_iter_vec

// repeated .vector.vector vec_t = 2;
inline int full_iter_vec::_internal_vec_t_size() const {
  return vec_t_.size();
}
inline int full_iter_vec::vec_t_size() const {
  return _internal_vec_t_size();
}
inline void full_iter_vec::clear_vec_t() {
  vec_t_.Clear();
}
inline ::vector::vector* full_iter_vec::mutable_vec_t(int index) {
  // @@protoc_insertion_point(field_mutable:vector.full_iter_vec.vec_t)
  return vec_t_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vector::vector >*
full_iter_vec::mutable_vec_t() {
  // @@protoc_insertion_point(field_mutable_list:vector.full_iter_vec.vec_t)
  return &vec_t_;
}
inline const ::vector::vector& full_iter_vec::_internal_vec_t(int index) const {
  return vec_t_.Get(index);
}
inline const ::vector::vector& full_iter_vec::vec_t(int index) const {
  // @@protoc_insertion_point(field_get:vector.full_iter_vec.vec_t)
  return _internal_vec_t(index);
}
inline ::vector::vector* full_iter_vec::_internal_add_vec_t() {
  return vec_t_.Add();
}
inline ::vector::vector* full_iter_vec::add_vec_t() {
  // @@protoc_insertion_point(field_add:vector.full_iter_vec.vec_t)
  return _internal_add_vec_t();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vector::vector >&
full_iter_vec::vec_t() const {
  // @@protoc_insertion_point(field_list:vector.full_iter_vec.vec_t)
  return vec_t_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vector

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vector_5fit_2eproto
